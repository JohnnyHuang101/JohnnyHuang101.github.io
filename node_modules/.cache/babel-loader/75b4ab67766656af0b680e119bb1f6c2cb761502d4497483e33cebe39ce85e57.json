{"ast":null,"code":"import { Children, isValidElement } from 'react';\nimport isNil from './isNil';\nimport Backspace from '../components/Backspace';\nimport Delay from '../components/Delay';\nimport Paste from '../components/Paste';\nconst typeToken = token => ({\n  type: 'TYPE_TOKEN',\n  payload: token\n});\nconst backspace = count => ({\n  type: 'BACKSPACE',\n  payload: count\n});\nconst pause = ms => ({\n  type: 'DELAY',\n  payload: ms\n});\nconst paste = str => ({\n  type: 'PASTE',\n  payload: str\n});\n/**\r\n * Returns an actions array generated from ReactNode.\r\n * `Main` component will use these actions to determine what it should do.\r\n */\nconst getActions = (node, splitter) => {\n  const actions = [];\n  let isPaste = false;\n  let tokensNumber = 0;\n  const recurse = node => {\n    Children.forEach(node, child => {\n      if (isValidElement(child)) {\n        if (child.type === Backspace) {\n          const count = child.props.count;\n          const payload = count > tokensNumber ? tokensNumber : count;\n          tokensNumber -= payload;\n          actions.push(backspace(payload));\n          return;\n        }\n        if (child.type === Delay) {\n          actions.push(pause(child.props.ms));\n          return;\n        }\n        if (child.type === Paste) {\n          isPaste = true;\n          Children.forEach(child.props.children, recurse);\n          isPaste = false;\n          return;\n        }\n        // if children is undefined or null, treat the child as a single token\n        if (isNil(child.props.children)) {\n          tokensNumber += 1;\n          actions.push(typeToken(child));\n          return;\n        }\n        Children.forEach(child.props.children, recurse);\n      }\n      const str = (() => {\n        if (typeof child === 'number') return child.toString(10);\n        if (typeof child === 'string') return child;\n      })();\n      if (str === undefined) return;\n      if (isPaste) {\n        tokensNumber += splitter(str).length;\n        actions.push(paste(str));\n        return;\n      }\n      const tokens = splitter(str);\n      tokensNumber += tokens.length;\n      tokens.forEach(token => {\n        actions.push(typeToken(token));\n      });\n    });\n  };\n  recurse(node);\n  return actions;\n};\nexport default getActions;","map":{"version":3,"names":["Children","isValidElement","isNil","Backspace","Delay","Paste","typeToken","token","type","payload","backspace","count","pause","ms","paste","str","getActions","node","splitter","actions","isPaste","tokensNumber","recurse","forEach","child","props","push","children","toString","undefined","length","tokens"],"sources":["C:/Users/Owner/OneDrive/Documents/GitHub/JohnnyHuang101.github.io/node_modules/react-typist-component/dist/utils/getActions.js"],"sourcesContent":["import { Children, isValidElement } from 'react';\r\nimport isNil from './isNil';\r\nimport Backspace from '../components/Backspace';\r\nimport Delay from '../components/Delay';\r\nimport Paste from '../components/Paste';\r\nconst typeToken = (token) => ({\r\n    type: 'TYPE_TOKEN',\r\n    payload: token,\r\n});\r\nconst backspace = (count) => ({\r\n    type: 'BACKSPACE',\r\n    payload: count,\r\n});\r\nconst pause = (ms) => ({ type: 'DELAY', payload: ms });\r\nconst paste = (str) => ({ type: 'PASTE', payload: str });\r\n/**\r\n * Returns an actions array generated from ReactNode.\r\n * `Main` component will use these actions to determine what it should do.\r\n */\r\nconst getActions = (node, splitter) => {\r\n    const actions = [];\r\n    let isPaste = false;\r\n    let tokensNumber = 0;\r\n    const recurse = (node) => {\r\n        Children.forEach(node, child => {\r\n            if (isValidElement(child)) {\r\n                if (child.type === Backspace) {\r\n                    const count = child.props.count;\r\n                    const payload = count > tokensNumber ? tokensNumber : count;\r\n                    tokensNumber -= payload;\r\n                    actions.push(backspace(payload));\r\n                    return;\r\n                }\r\n                if (child.type === Delay) {\r\n                    actions.push(pause(child.props.ms));\r\n                    return;\r\n                }\r\n                if (child.type === Paste) {\r\n                    isPaste = true;\r\n                    Children.forEach(child.props.children, recurse);\r\n                    isPaste = false;\r\n                    return;\r\n                }\r\n                // if children is undefined or null, treat the child as a single token\r\n                if (isNil(child.props.children)) {\r\n                    tokensNumber += 1;\r\n                    actions.push(typeToken(child));\r\n                    return;\r\n                }\r\n                Children.forEach(child.props.children, recurse);\r\n            }\r\n            const str = (() => {\r\n                if (typeof child === 'number')\r\n                    return child.toString(10);\r\n                if (typeof child === 'string')\r\n                    return child;\r\n            })();\r\n            if (str === undefined)\r\n                return;\r\n            if (isPaste) {\r\n                tokensNumber += splitter(str).length;\r\n                actions.push(paste(str));\r\n                return;\r\n            }\r\n            const tokens = splitter(str);\r\n            tokensNumber += tokens.length;\r\n            tokens.forEach(token => {\r\n                actions.push(typeToken(token));\r\n            });\r\n        });\r\n    };\r\n    recurse(node);\r\n    return actions;\r\n};\r\nexport default getActions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}