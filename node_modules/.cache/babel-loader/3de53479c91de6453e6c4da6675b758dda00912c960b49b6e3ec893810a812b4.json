{"ast":null,"code":"import React,{useState,useEffect,useCallback}from\"react\";import Container from\"react-bootstrap/Container\";import{Jumbotron}from\"./migration\";import Row from\"react-bootstrap/Row\";import ProjectCard from\"./ProjectCard\";import axios from\"axios\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const dummyProject={name:null,description:null,svn_url:null,stargazers_count:null,languages_url:null,pushed_at:null};const API=\"https://api.github.com\";// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\nconst Project=_ref=>{let{heading,username,length,specfic}=_ref;const allReposAPI=`${API}/users/${username}/repos?sort=updated&direction=desc`;const specficReposAPI=`${API}/repos/${username}`;const dummyProjectsArr=new Array(length+specfic.length).fill(dummyProject);const[projectsArray,setProjectsArray]=useState([]);const fetchRepos=useCallback(async()=>{let repoList=[];try{// getting all repos\nconst response=await axios.get(allReposAPI);// slicing to the length\nrepoList=[...response.data.slice(0,length)];// adding specified repos\ntry{for(let repoName of specfic){const response=await axios.get(`${specficReposAPI}/${repoName}`);repoList.push(response.data);}}catch(error){console.error(error.message);}// setting projectArray\n// TODO: remove the duplication.\nsetProjectsArray(repoList);}catch(error){console.error(error.message);}},[allReposAPI,length,specfic,specficReposAPI]);useEffect(()=>{fetchRepos();},[fetchRepos]);return/*#__PURE__*/_jsx(Jumbotron,{fluid:true,id:\"projects\",className:\"bg-light m-0\",children:/*#__PURE__*/_jsxs(Container,{className:\"\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"display-4 pb-5 text-center\",children:heading}),/*#__PURE__*/_jsx(Row,{children:projectsArray.length?projectsArray.map((project,index)=>/*#__PURE__*/_jsx(ProjectCard,{id:`project-card-${index}`,value:project},`project-card-${index}`)):dummyProjectsArr.map((project,index)=>/*#__PURE__*/_jsx(ProjectCard,{id:`dummy-${index}`,value:project},`dummy-${index}`))})]})});};export default Project;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Container","Jumbotron","Row","ProjectCard","axios","jsx","_jsx","jsxs","_jsxs","dummyProject","name","description","svn_url","stargazers_count","languages_url","pushed_at","API","Project","_ref","heading","username","length","specfic","allReposAPI","specficReposAPI","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","response","get","data","slice","repoName","push","error","console","message","fluid","id","className","children","map","project","index","value"],"sources":["/Users/johnnybaguettess/Documents/cse_217/Untitled/JohnnyHuang101.github.io/src/components/home/Project.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Jumbotron } from \"./migration\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport axios from \"axios\";\r\n\r\nconst dummyProject = {\r\n  name: null,\r\n  description: null,\r\n  svn_url: null,\r\n  stargazers_count: null,\r\n  languages_url: null,\r\n  pushed_at: null,\r\n};\r\nconst API = \"https://api.github.com\";\r\n// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\r\n\r\nconst Project = ({ heading, username, length, specfic }) => {\r\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\r\n  const specficReposAPI = `${API}/repos/${username}`;\r\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\r\n    dummyProject\r\n  );\r\n\r\n  const [projectsArray, setProjectsArray] = useState([]);\r\n\r\n  const fetchRepos = useCallback(async () => {\r\n    let repoList = [];\r\n    try {\r\n      // getting all repos\r\n      const response = await axios.get(allReposAPI);\r\n      // slicing to the length\r\n      repoList = [...response.data.slice(0, length)];\r\n      // adding specified repos\r\n      try {\r\n        for (let repoName of specfic) {\r\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\r\n          repoList.push(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n      // setting projectArray\r\n      // TODO: remove the duplication.\r\n      setProjectsArray(repoList);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }, [allReposAPI, length, specfic, specficReposAPI]);\r\n\r\n  useEffect(() => {\r\n    fetchRepos();\r\n  }, [fetchRepos]);\r\n\r\n  return (\r\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\r\n      <Container className=\"\">\r\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\r\n        <Row>\r\n          {projectsArray.length\r\n            ? projectsArray.map((project, index) => (\r\n              <ProjectCard\r\n                key={`project-card-${index}`}\r\n                id={`project-card-${index}`}\r\n                value={project}\r\n              />\r\n            ))\r\n            : dummyProjectsArr.map((project, index) => (\r\n              <ProjectCard\r\n                key={`dummy-${index}`}\r\n                id={`dummy-${index}`}\r\n                value={project}\r\n              />\r\n            ))}\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}